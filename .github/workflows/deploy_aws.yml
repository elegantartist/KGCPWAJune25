name: Deploy to AWS

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  AWS_REGION: ap-southeast-2
  NODE_VERSION: '20'

permissions:
  id-token: write   # Required for OIDC
  contents: read    # Required to checkout code

jobs:
  deploy-services:
    name: Deploy Backend Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api, privacy-proxy]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: '8'
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            services/*/node_modules
            ~/.cache/pnpm
          key: ${{ runner.os }}-deps-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-deps-pnpm-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      # Method 1: OIDC Authentication (Recommended)
      - name: Configure AWS credentials (OIDC)
        if: env.AWS_ROLE_ARN != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-KGC-Deploy
          aws-region: ${{ env.AWS_REGION }}
          
      # Method 2: IAM User Credentials (Fallback)
      - name: Configure AWS credentials (IAM User)
        if: env.AWS_ROLE_ARN == ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Build service container
        run: |
          SERVICE_NAME=${{ matrix.service }}
          
          # Build based on current monorepo structure (pre-migration)
          if [ "$SERVICE_NAME" = "api" ]; then
            echo "Building API service from server/ directory"
            docker build -t kgc-$SERVICE_NAME:${{ github.sha }} -f Dockerfile .
          elif [ "$SERVICE_NAME" = "privacy-proxy" ]; then
            echo "Privacy proxy service not yet extracted - creating placeholder"
            echo "TODO: Extract privacy service in P11 migration phase"
            # For now, skip privacy-proxy until service extraction
            exit 0
          fi
          
      - name: Deploy API service
        if: matrix.service == 'api'
        run: |
          echo "Deploying API service to AWS App Runner"
          
          # TODO: Replace with actual infrastructure deployment script from P10
          # This should run terraform/CDK/CloudFormation to deploy:
          # - App Runner service with container
          # - RDS PostgreSQL database (if not using Neon)
          # - ElastiCache Redis (optional)
          # - Secrets Manager integration
          # - CloudWatch logging
          # - Application Load Balancer (if needed)
          
          # For now, create deployment artifact
          echo "Creating deployment package for App Runner"
          
          # Tag and push container to ECR (TODO: implement in P10)
          # aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
          # docker tag kgc-api:${{ github.sha }} $ECR_REGISTRY/kgc-api:${{ github.sha }}
          # docker tag kgc-api:${{ github.sha }} $ECR_REGISTRY/kgc-api:latest  
          # docker push $ECR_REGISTRY/kgc-api:${{ github.sha }}
          # docker push $ECR_REGISTRY/kgc-api:latest
          
          echo "✅ API service deployment prepared"
          echo "⚠️  TODO: Complete App Runner deployment in P10"
          
      - name: Deploy privacy proxy service
        if: matrix.service == 'privacy-proxy'
        run: |
          echo "Privacy proxy service deployment"
          echo "⚠️  TODO: Service not yet extracted from main API"
          echo "⚠️  TODO: Will be implemented in P11 migration phase"
          exit 0
          
      - name: Run post-deployment health checks
        if: matrix.service == 'api'
        run: |
          echo "Running health checks for ${{ matrix.service }} service"
          
          # TODO: Implement actual health checks in P10
          # - API endpoint health check
          # - Database connectivity
          # - Redis connectivity (if used)
          # - External service connectivity (OpenAI, Twilio, etc.)
          # - Authentication flow validation
          # - Australian compliance validation
          
          echo "✅ Health check placeholder completed"
          echo "⚠️  TODO: Implement comprehensive health checks in P10"
          
      - name: Update deployment status
        if: always()
        run: |
          echo "## 🚀 AWS Service Deployment" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && contains(github.event.head_commit.message, '[deploy-infra]'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials (OIDC)
        if: env.AWS_ROLE_ARN != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-KGC-Infra
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Configure AWS credentials (IAM User)
        if: env.AWS_ROLE_ARN == ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Deploy infrastructure
        run: |
          echo "Deploying KGC Healthcare infrastructure"
          
          # TODO: Implement infrastructure deployment in P10
          # This should deploy:
          # 1. AWS App Runner services
          # 2. RDS PostgreSQL (if not using Neon)
          # 3. ElastiCache Redis (optional)
          # 4. Secrets Manager secrets
          # 5. CloudWatch log groups
          # 6. IAM roles and policies
          # 7. VPC and security groups (if needed)
          # 8. Application Load Balancer (if needed)
          # 9. Route 53 DNS records
          # 10. CloudFront distribution (for API caching)
          
          # Example terraform/CDK deployment:
          # cd infrastructure/
          # terraform init
          # terraform plan -var="environment=${{ github.event.inputs.environment || 'production' }}"
          # terraform apply -auto-approve
          
          echo "✅ Infrastructure deployment prepared"
          echo "⚠️  TODO: Complete infrastructure deployment scripts in P10"
          
      - name: Update infrastructure status
        if: always()
        run: |
          echo "## 🏗️ Infrastructure Deployment" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-services]
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-services.result }}" = "success" ]; then
            echo "## 🎉 Deployment Successful" >> $GITHUB_STEP_SUMMARY
            echo "**Services:** API Service deployed to AWS App Runner" >> $GITHUB_STEP_SUMMARY
            echo "**Region:** ${{ env.AWS_REGION }} (Australia Southeast)" >> $GITHUB_STEP_SUMMARY
            echo "**Healthcare Compliance:** TGA Class I SaMD, Australian Privacy Principles" >> $GITHUB_STEP_SUMMARY
            echo "**Features Available:**" >> $GITHUB_STEP_SUMMARY
            echo "- 🏥 Patient health data management" >> $GITHUB_STEP_SUMMARY
            echo "- 👨‍⚕️ Doctor care plan directives" >> $GITHUB_STEP_SUMMARY
            echo "- 🤖 AI-powered health guidance" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 Progress tracking and reporting" >> $GITHUB_STEP_SUMMARY
            echo "- 🔒 SMS authentication and RBAC" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "**Status:** One or more services failed to deploy" >> $GITHUB_STEP_SUMMARY
            echo "**Action Required:** Review deployment logs and retry" >> $GITHUB_STEP_SUMMARY
          fi